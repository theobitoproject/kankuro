// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/messenger/config_parser.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocol "github.com/theobitoproject/kankuro/pkg/protocol"
)

// MockConfigParser is a mock of ConfigParser interface.
type MockConfigParser struct {
	ctrl     *gomock.Controller
	recorder *MockConfigParserMockRecorder
}

// MockConfigParserMockRecorder is the mock recorder for MockConfigParser.
type MockConfigParserMockRecorder struct {
	mock *MockConfigParser
}

// NewMockConfigParser creates a new mock instance.
func NewMockConfigParser(ctrl *gomock.Controller) *MockConfigParser {
	mock := &MockConfigParser{ctrl: ctrl}
	mock.recorder = &MockConfigParserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockConfigParser) EXPECT() *MockConfigParserMockRecorder {
	return m.recorder
}

// GetMainCommand mocks base method.
func (m *MockConfigParser) GetMainCommand() (protocol.Cmd, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMainCommand")
	ret0, _ := ret[0].(protocol.Cmd)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMainCommand indicates an expected call of GetMainCommand.
func (mr *MockConfigParserMockRecorder) GetMainCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMainCommand", reflect.TypeOf((*MockConfigParser)(nil).GetMainCommand))
}

// UnmarshalCatalogPath mocks base method.
func (m *MockConfigParser) UnmarshalCatalogPath(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalCatalogPath", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalCatalogPath indicates an expected call of UnmarshalCatalogPath.
func (mr *MockConfigParserMockRecorder) UnmarshalCatalogPath(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalCatalogPath", reflect.TypeOf((*MockConfigParser)(nil).UnmarshalCatalogPath), v)
}

// UnmarshalSourceConfigPath mocks base method.
func (m *MockConfigParser) UnmarshalSourceConfigPath(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalSourceConfigPath", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalSourceConfigPath indicates an expected call of UnmarshalSourceConfigPath.
func (mr *MockConfigParserMockRecorder) UnmarshalSourceConfigPath(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalSourceConfigPath", reflect.TypeOf((*MockConfigParser)(nil).UnmarshalSourceConfigPath), v)
}

// UnmarshalStatePath mocks base method.
func (m *MockConfigParser) UnmarshalStatePath(v interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnmarshalStatePath", v)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnmarshalStatePath indicates an expected call of UnmarshalStatePath.
func (mr *MockConfigParserMockRecorder) UnmarshalStatePath(v interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnmarshalStatePath", reflect.TypeOf((*MockConfigParser)(nil).UnmarshalStatePath), v)
}
