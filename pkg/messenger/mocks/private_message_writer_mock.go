// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/messenger/private_message_writer.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	protocol "github.com/theobitoproject/kankuro/pkg/protocol"
)

// MockPrivateMessageWriter is a mock of PrivateMessageWriter interface.
type MockPrivateMessageWriter struct {
	ctrl     *gomock.Controller
	recorder *MockPrivateMessageWriterMockRecorder
}

// MockPrivateMessageWriterMockRecorder is the mock recorder for MockPrivateMessageWriter.
type MockPrivateMessageWriterMockRecorder struct {
	mock *MockPrivateMessageWriter
}

// NewMockPrivateMessageWriter creates a new mock instance.
func NewMockPrivateMessageWriter(ctrl *gomock.Controller) *MockPrivateMessageWriter {
	mock := &MockPrivateMessageWriter{ctrl: ctrl}
	mock.recorder = &MockPrivateMessageWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrivateMessageWriter) EXPECT() *MockPrivateMessageWriterMockRecorder {
	return m.recorder
}

// WriteCatalog mocks base method.
func (m *MockPrivateMessageWriter) WriteCatalog(catalog *protocol.Catalog) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteCatalog", catalog)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteCatalog indicates an expected call of WriteCatalog.
func (mr *MockPrivateMessageWriterMockRecorder) WriteCatalog(catalog interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteCatalog", reflect.TypeOf((*MockPrivateMessageWriter)(nil).WriteCatalog), catalog)
}

// WriteConnectionStat mocks base method.
func (m *MockPrivateMessageWriter) WriteConnectionStat(status protocol.CheckStatus) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteConnectionStat", status)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteConnectionStat indicates an expected call of WriteConnectionStat.
func (mr *MockPrivateMessageWriterMockRecorder) WriteConnectionStat(status interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteConnectionStat", reflect.TypeOf((*MockPrivateMessageWriter)(nil).WriteConnectionStat), status)
}

// WriteRecord mocks base method.
func (m *MockPrivateMessageWriter) WriteRecord(record *protocol.Record) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteRecord", record)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteRecord indicates an expected call of WriteRecord.
func (mr *MockPrivateMessageWriterMockRecorder) WriteRecord(record interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteRecord", reflect.TypeOf((*MockPrivateMessageWriter)(nil).WriteRecord), record)
}

// WriteSpec mocks base method.
func (m *MockPrivateMessageWriter) WriteSpec(connectorSpecification *protocol.ConnectorSpecification) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WriteSpec", connectorSpecification)
	ret0, _ := ret[0].(error)
	return ret0
}

// WriteSpec indicates an expected call of WriteSpec.
func (mr *MockPrivateMessageWriterMockRecorder) WriteSpec(connectorSpecification interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WriteSpec", reflect.TypeOf((*MockPrivateMessageWriter)(nil).WriteSpec), connectorSpecification)
}
