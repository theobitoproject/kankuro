// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/source/source.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	messenger "github.com/theobitoproject/kankuro/pkg/messenger"
	protocol "github.com/theobitoproject/kankuro/pkg/protocol"
)

// MockSource is a mock of Source interface.
type MockSource struct {
	ctrl     *gomock.Controller
	recorder *MockSourceMockRecorder
}

// MockSourceMockRecorder is the mock recorder for MockSource.
type MockSourceMockRecorder struct {
	mock *MockSource
}

// NewMockSource creates a new mock instance.
func NewMockSource(ctrl *gomock.Controller) *MockSource {
	mock := &MockSource{ctrl: ctrl}
	mock.recorder = &MockSourceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSource) EXPECT() *MockSourceMockRecorder {
	return m.recorder
}

// Check mocks base method.
func (m *MockSource) Check(mw messenger.MessageWriter, cp messenger.ConfigParser) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Check", mw, cp)
	ret0, _ := ret[0].(error)
	return ret0
}

// Check indicates an expected call of Check.
func (mr *MockSourceMockRecorder) Check(mw, cp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Check", reflect.TypeOf((*MockSource)(nil).Check), mw, cp)
}

// Discover mocks base method.
func (m *MockSource) Discover(mw messenger.MessageWriter, cp messenger.ConfigParser) (*protocol.Catalog, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Discover", mw, cp)
	ret0, _ := ret[0].(*protocol.Catalog)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Discover indicates an expected call of Discover.
func (mr *MockSourceMockRecorder) Discover(mw, cp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Discover", reflect.TypeOf((*MockSource)(nil).Discover), mw, cp)
}

// Read mocks base method.
func (m *MockSource) Read(cc *protocol.ConfiguredCatalog, mw messenger.MessageWriter, cp messenger.ConfigParser, hub messenger.ChannelHub) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Read", cc, mw, cp, hub)
}

// Read indicates an expected call of Read.
func (mr *MockSourceMockRecorder) Read(cc, mw, cp, hub interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*MockSource)(nil).Read), cc, mw, cp, hub)
}

// Spec mocks base method.
func (m *MockSource) Spec(mw messenger.MessageWriter, cp messenger.ConfigParser) (*protocol.ConnectorSpecification, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Spec", mw, cp)
	ret0, _ := ret[0].(*protocol.ConnectorSpecification)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Spec indicates an expected call of Spec.
func (mr *MockSourceMockRecorder) Spec(mw, cp interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Spec", reflect.TypeOf((*MockSource)(nil).Spec), mw, cp)
}
